read the section carefully i am providing to you based on that i want to implement swap functionality in my backend will create apis so that frontend will integerate 🛝 API Flow Rango Exchange Basic API Flow If you'd like to skip ahead to the code, please refer to the SDK Example tutorial. Scenario Here is a sample interaction scenario between a dApp and Rango Basic API/SDK. This flow is designed to be as straightforward as possible, but additional steps can be taken to enhance functionality. Step-by-Step Flow Meta API Call dApp fetches supported blockchains, swappers, and tokens to populate the swap UI. Sample Code: const meta = await axios.get('https://api.rango.exchange/basic/meta', { params: { 'apiKey': 'c6381a79-2817-4602-83bf-6a641a409e32' } }); Use the fetched metadata to display available blockchains and their tokens to the user. Allow the user to select the source and destination tokens. -User Swap Selection Example: User chooses to swap 1 BSC.BNB to AVAX_CCHAIN.USDT. sample code const tokens = meta.tokens; const BNB_ADDRESS = null const USDT_ADDRESS = '0xc7198437980c041c805a1edcba50c1ce5db95118' // You can omit the following lines if you don't want to display token // details like the icon or price to the user before retrieving the quote. const BSC_BNB = tokens.find(t => t.address === BNB_ADDRESS && t.blockchain === 'BSC') const AVAX_USDT = tokens.find(t => t.address === USDT_ADDRESS && t.blockchain === 'AVAX_CCHAIN') -Quote API Call dApp retrieves the best route and quote for the swap. If not confirmed within timeout (e.g., 15s), re-fetch the quote. sample code const quote = await axios.get('https://api.rango.exchange/basic/quote', { params: { 'from': 'BSC.BNB', 'to': 'AVAX_CCHAIN--0xc7198437980c041c805a1edcba50c1ce5db95118', 'amount': '100000000000000000', 'slippage': '3', 'apiKey': 'c6381a79-2817-4602-83bf-6a641a409e32' } }); // check if the route was okay if (!quote.result) { // there was no route } else if (quote.resultType === 'HIGH_IMPACT') { // there was a quote but price impact was too high } else if (quote.resultType === 'INPUT_LIMIT_ISSUE') { // there was a quote but not suitable for this input amount. // user should increase or decrease the input amount } else if (quote.resultType === 'OK') { // everything was okay } User Confirms Quote Initiates the swap process. If tx field in swap response is non-empty, it means that transaction is created successfully. If tx field is null or resultType is not OK, dApp shows an error to the user and flow breaks. Here is the sample code. Copy const swap = await axios.get('https://api.rango.exchange/basic/swap', { params: { 'from': 'BSC.BNB', 'to': 'AVAX_CCHAIN.USDT.E--0xc7198437980c041c805a1edcba50c1ce5db95118', 'amount': '100000000000000000', 'slippage': '3', 'fromAddress': '0x6f33bb1763eebead07cf8815a62fcd7b30311fa3', 'toAddress': '0x6f33bb1763eebead07cf8815a62fcd7b30311fa3', 'disableEstimate': true, 'apiKey': 'c6381a79-2817-4602-83bf-6a641a409e32' } }); if (swap.tx && swap.resultType === 'OK') { // transaction is created susccessfully // you could compare confirmed quote with the swap output amount // and warn the user if there is noticable difference // e.g. check if new quote output is 2% less than previous one const confirmedOutput = new BigNumber(quote.route?.outputAmount) const finalOutput = new BigNumber(swap.route?.outputAmount) if (finalOutput.lt(confirmedOutput.multipliedBy(new BigNumber(0.98))) { // get double confirmation from the user } else { // proceed to sign flow } } else if (!swap.tx && swap.resultType === 'OK') { // getting quote was successful but there was a problem // in creating the transaction console.log(swap.error) } else { // there was a problem getting the quote } How to set disableEstimate parameter in swap method? If you are checking the balance and fee amount on your client side, it is recommended to set this parameter to true, as it will significantly reduce the response time. --- Swap API Call If tx field in swap response is non-empty, it means that transaction is created successfully. If tx field is null or resultType is not OK, dApp shows an error to the user and flow breaks. Here is the sample code. dApp gets transaction data for the route. const swap = await axios.get('https://api.rango.exchange/basic/swap', { params: { 'from': 'BSC.BNB', 'to': 'AVAX_CCHAIN.USDT.E--0xc7198437980c041c805a1edcba50c1ce5db95118', 'amount': '100000000000000000', 'slippage': '3', 'fromAddress': '0x6f33bb1763eebead07cf8815a62fcd7b30311fa3', 'toAddress': '0x6f33bb1763eebead07cf8815a62fcd7b30311fa3', 'disableEstimate': true, 'apiKey': 'c6381a79-2817-4602-83bf-6a641a409e32' } }); if (swap.tx && swap.resultType === 'OK') { // transaction is created susccessfully // you could compare confirmed quote with the swap output amount // and warn the user if there is noticable difference // e.g. check if new quote output is 2% less than previous one const confirmedOutput = new BigNumber(quote.route?.outputAmount) const finalOutput = new BigNumber(swap.route?.outputAmount) if (finalOutput.lt(confirmedOutput.multipliedBy(new BigNumber(0.98))) { // get double confirmation from the user } else { // proceed to sign flow } } else if (!swap.tx && swap.resultType === 'OK') { // getting quote was successful but there was a problem // in creating the transaction console.log(swap.error) } else { // there was a problem getting the quote } How to set disableEstimate parameter in swap method? If you are checking the balance and fee amount on your client side, it is recommended to set this parameter to true, as it will significantly reduce the response time. If output amount < quoted amount, dApp may cancel or ask for reconfirmation. Approval Handling (if needed) It is important to use approve transaction data generated by Rango API and not hard-coding something on your client side for creating approve transaction, because for some protocols (some bridges), the contract that should be approved is dynamically generated via their API based on the quote. // sample type guard export const isEvmTransaction = (tx: { type: TransactionType }): transaction is EvmTransaction => tx.type === TransactionType.EVM // how to build and sign EVM approve transaction const tx = swap.tx if (isEvmTransacation(tx)) { if (tx.approveData && tx.approveTo) { // user doesn't have enough approval and needs to sign approve tx const approveTx = { from: tx.from, to: tx.approveTo, data: tx.approveData, value: '0x', } const approveTxHash = (await signer.sendTransaction(approveTx)).hash } else { // user already has enough approve amoaunt // we could proceed to 8th step (main transaction) } }For EVM chains, Starknet, Tron: If approval is insufficient, dApp generates an approval transaction. Approval Confirmation dApp checks approval status via Is Approved API. Main Swap Transaction dApp generates and asks user to sign the swap transaction. Status Monitoring dApp optionally polls Status API to track success/failure. Failure Reporting If swap fails due to client-side issues (e.g., RPC errors), dApp can report via Report Failure API. take reference of this https://docs.rango.exchange/api-integration/basic-api-single-step/api-flow#id-1.-the-dapp-calls-meta-api-to-get-list-of-all-supported-blockchains-swappers-and-tokens-which-are-us